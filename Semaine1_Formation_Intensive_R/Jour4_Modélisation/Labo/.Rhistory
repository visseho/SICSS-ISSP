library(tidyverse)
poids <- c(57, 84, 90, 71, 77, 68, 73)
poids
longueur <- c(123, 129, 143, 125, 122, 125, 122)
longueur
louve <- data_frame(poids, longueur)
louve
View(louve)
ggplot(louve) +
geom_point(aes(x = longueur, y = poids))
ggplot(louve) +
geom_point(aes(x = longueur, y = poids)) +
geom_smooth(aes(x = longueur, y = poids), method = "lm", se = FALSE, size = .5)
louve <-
louve %>%
mutate(dec_longueur = longueur - mean(longueur),
dec_longueur_sq = dec_longueur ^ 2,
dec_poids = poids - mean(poids),
prod_croise = dec_poids*dec_longueur)
louve
View(louve)
coef_reg <-
louve %>%
summarise(beta = sum(prod_croise)/sum(dec_longueur_sq),
alpha = mean(poids) - beta*mean(longueur))
coef_reg
ggplot(louve) +
geom_point(aes(x = longeur, y = poids))
ggplot(louve) +
geom_point(aes(x = longueur, y = poids))
coef_reg[1]
coef_reg[2]
ggplot(louve) +
geom_point(aes(x = longueur, y = poids)) +
geom_abline(aes(intercept = coef_reg[2], slope = coef_reg[1]))
coef_reg[[1]]
ggplot(louve) +
geom_point(aes(x = longueur, y = poids)) +
geom_abline(aes(intercept = coef_reg[[2]], slope = coef_reg[[1]]))
coef_reg[1]
class(coef_reg[1])
class(coef_reg[[1]])
ggplot(louve) +
geom_point(aes(x = longueur, y = poids)) +
geom_abline(aes(intercept = coef_reg[[2]], slope = coef_reg[[1]]))
ggplot(louve) +
geom_point(aes(x = longueur, y = poids)) +
geom_abline(aes(intercept = coef_reg[[2]], slope = coef_reg[[1]]), color = "red")
coef_reg
ggplot(louve) +
geom_point(aes(x = longueur, y = poids)) +
geom_abline(data = coef_reg, aes(intercept = coef_reg$alpha, slope = coef_reg$beta), color = "red")
ggplot(louve) +
geom_point(aes(x = longueur, y = poids)) +
geom_abline(aes(intercept = coef_reg[[2]], slope = coef_reg[[1]]), color = "red") +
geom_smooth(aes(x = longueur, y = poids), method = "lm"))
ggplot(louve) +
geom_point(aes(x = longueur, y = poids)) +
geom_abline(aes(intercept = coef_reg[[2]], slope = coef_reg[[1]]), color = "red") +
geom_smooth(aes(x = longueur, y = poids), method = "lm")
ggplot(louve) +
geom_point(aes(x = longueur, y = poids)) +
geom_abline(aes(intercept = coef_reg[[2]], slope = coef_reg[[1]]), color = "red") +
geom_smooth(aes(x = longueur, y = poids), method = "lm", se = FALSE)
coef_reg
a <- coef_reg[2]
a
b <- coef_reg[1]
b
louve <-
louve %>%
mutate(poids_pred = a + b	*longueur)
View(louve)
a
a <- coef_reg[[2]]
a
b <- coef_reg[[1]]
b
louve <-
louve %>%
mutate(poids_pred = a + b	*longueur)
View(louve)
louve <-
louve %>%
mutate( residu = poids - poids_pred)
louve
View(louve)
reg1 <- lm(formula =  poids ~ longueur, data = louve)
reg <-
louve %>%
lm(formula =  poids ~ longueur)
reg1
View(reg1)
summary(reg1)
summary(reg1)[1]
summary(reg1)[2]
summary(reg1)
#install.packages("broom")
library(broom)
?broom
tidy(reg1)
tableau_reg <- tidy(reg1)
tableau_reg
tableau_reg$estimate
tableau_reg
glance(reg1)
results <- augment(reg1)
results
louve <-
louve %>%
mutate(longueur1 = longueur - 122)
reg2 <- lm(formula =  poids ~ longueur1 , data = louve)
reg2
reg2
rm(list = ls())
library(tidyverse)
library(summarytools)
library(broom)
dhs_ipv <- read_csv("../dhs_ipv.csv")
dhs_ipv <- read_csv("../Données/dhs_ipv.csv")
summary(dhs_ipv)
class(dhs_ipv$beat_burnfood)
lm(beat_burnfood ~ sec_school, data = dhs_ipv)
reg1 <- lm(beat_burnfood ~ sec_school, data = dhs_ipv)
reg1
coef(reg1)
summary(reg1)
reg2 <- lm(beat_burnfood ~  no_media, data = dhs_ipv)
summary(reg2)
class(dhs_ipv$region)
freq(dhs_ipv$region)
reg3 <- lm(beat_burnfood ~  region, data = dhs_ipv)
reg3
summary(reg3)
dhs_ipv <-
dhs_ipv %>%
mutate(year_binaire = factor(if_else(year <= 2010, "Avant 2010", "Apres 2010")))
freq(dhs_ipv$year_binaire)
reg4 <- lm(beat_burnfood ~  year_binaire, data = dhs_ipv)
summary(reg4)
freq(dhs_ipv$year_binaire)
reg5 <- lm(beat_burnfood ~ relevel(year_binaire, ref = "Avant 2010"), data = dhs_ipv)
coef(reg5)
dhs_ipv <-
dhs_ipv %>%
mutate(year_binaire1 = factor(if_else(year <= 2010, "Avant 2010", "Apres 2010"), levels = c("Avant 2010", "Apres 2010")))
freq(dhs_ipv$year_binaire1)
reg6 <- lm(beat_burnfood ~  year_binaire1, data = dhs_ipv)
summary(reg6)
reg_mul1 <- lm(beat_burnfood ~ sec_school + no_media, data = dhs_ipv)
reg_mul1
summary(reg_mul1)
cor(dhs_ipv$sec_school, dhs_ipv$no_media, use = "pairwise.complete.obs")
summary(reg_mul1)
reg_mul2 <- lm(beat_burnfood ~ sec_school + no_media + region + year_binaire, data = dhs_ipv)
summary(reg_mul2)
library(stargazer)
stargazer(reg1, reg2, reg_mul1, reg_mul2, title = "Divers modèles", align = TRUE, type = "text")
stargazer(reg1, reg2, reg_mul1, reg_mul2, title = "Divers modèles", align = TRUE, type = "latex")
stargazer(reg1, reg2, reg_mul1, reg_mul2, title = "Divers modèles", align = TRUE, type = "text")
rm(list = ls())
library(tidyverse)
dhs_ipv <- read_csv("../Données/dhs_ipv.csv")
ggplot(dhs_ipv) +
geom_point(aes(x = sec_school, y = beat_burnfood), color = "blue") +
geom_text(aes(x = sec_school, y = beat_goesout, label = country), size = 2)
ggplot(dhs_ipv) +
geom_point(aes(x = sec_school, y = beat_burnfood), color = "blue") +
geom_text(aes(x = sec_school, y = beat_goesout, label = country), color = "red", size = 2)
ggplot(dhs_ipv) +
geom_point(aes(x = sec_school, y = beat_burnfood), color = "blue") +
geom_text(aes(x = sec_school, y = beat_goesout, label = country), size = 2)
ggplot(dhs_ipv) +
# geom_point(aes(x = sec_school, y = beat_burnfood), color = "blue") +
geom_text(aes(x = sec_school, y = beat_goesout, label = country), size = 2)
ggplot(dhs_ipv) +
geom_point(aes(x = sec_school, y = beat_burnfood), color = "blue") +
geom_text(aes(x = sec_school, y = beat_goesout, label = country), size = 2)
ggplot(dhs_ipv) +
# geom_point(aes(x = sec_school, y = beat_burnfood), color = "blue") +
geom_text(aes(x = sec_school, y = beat_goesout, label = country), size = 2)
library(tidyverse)
poids <- c(57, 84, 90, 71, 77, 68, 73)
longueur <- c(123, 129, 143, 125, 122, 125, 122)
louve <- data_frame(poids, longueur)
ggplot(louve) +
geom_point(aes(x = longueur, y = poids))
ggplot(louve) +
geom_point(aes(x = longueur, y = poids)) +
geom_smooth(aes(x = longueur, y = poids), method = "lm", se = FALSE, size = .5)
ggplot(louve) +
geom_point(aes(x = longueur, y = poids)) +
geom_smooth(aes(x = longueur, y = poids), method = "lm", se = TRUE, size = .5)
ggplot(louve) +
geom_point(aes(x = longueur, y = poids)) +
geom_smooth(aes(x = longueur, y = poids), method = "lm", se = FALSE, size = .5)
ggplot(louve) +
geom_point(aes(x = longueur, y = poids)) +
geom_smooth(aes(x = longueur, y = poids), method = "lm", se = FALSE, size = 5)
ggplot(louve) +
geom_point(aes(x = longueur, y = poids)) +
geom_smooth(aes(x = longueur, y = poids), method = "lm", se = FALSE, size = .5)
View(louve)
louve <-
louve %>%
mutate(dec_longueur = longueur - mean(longueur),
dec_longueur_sq = dec_longueur^2,
dec_poids = poids - mean(poids),
prod_croise = dec_poids*dec_longueur)
View(louve)
mean(louve$longueur)
View(louve)
View(louve)
coef_reg <-
louve %>%
summarise(beta = sum(prod_croise)/sum(dec_longueur_sq),
alpha = mean(poids) - beta*mean(longueur))
coef_reg
coef_reg[[1]]
coef_reg[[2]]
class(coef_reg[1])
coef_reg[[1]]
coef_reg[1]
coef_reg[[1]]
coef_reg[1]*2
coef_reg
coef_reg[1,1]
coef_reg[[1,1]]
coef_reg$beta
class(coef_reg[1])
class(coef_reg[[1]])
class(coef_reg[1])
class(coef_reg[[1]])
coef_reg
ggplot(louve) +
geom_point(aes(x = longueur, y = poids)) +
geom_abline(aes(intercept = coef_reg[[2]], slope = coef_reg[[1]]), color = "red")
ggplot(louve) +
geom_point(aes(x = longueur, y = poids)) +
geom_abline(aes(intercept = coef_reg[[2]], slope = coef_reg[[1]]), color = "red") +
geom_smooth(aes(x = longueur, y = poids), method = "lm", se = FALSE)
a <- coef_reg[[2]]
b <- coef_reg[[1]]
louve <-
louve %>%
mutate(poids_pred = a + b	*longueur)
louve
louve <-
louve %>%
mutate( residu = poids - poids_pred)
louve
ggplot(louve) +
geom_point(aes(x = longueur, y = poids)) +
geom_smooth(aes(x = longueur, y = poids), method = "lm", se = FALSE, size = .5) +
geom_segment(aes(x = longueur, y = poids, xend = longueur, yend = poids_pred), color = "red")
reg1 <- lm(formula =  poids ~ longueur, data = louve)
reg1
reg <-
louve %>%
lm(formula =  poids ~ longueur)
reg1
summary(reg1)
summary(reg1)
library(broom)
tableau_reg <- tidy(reg1)
tableau_reg
View(tableau_reg)
reg1
summary(reg1)
results <- augment(reg1)
results
glance(reg1)
rm(list = ls())
#install.packages("broom")
library(tidyverse)
library(summarytools)
library(broom)
dhs_ipv <- read_csv("../Données/dhs_ipv.csv")
summary(dhs_ipv)
lm(beat_burnfood ~ sec_school, data = dhs_ipv)
reg2 <- lm(beat_burnfood ~  no_media, data = dhs_ipv)
summary(reg2)
reg3 <- lm(beat_burnfood ~  region, data = dhs_ipv)
reg3
freq(dhs_ipv$region)
reg3 <- lm(beat_burnfood ~  region, data = dhs_ipv)
reg3
dhs_ipv <-
dhs_ipv %>%
mutate(year_binaire = factor(if_else(year <= 2010, "Avant 2010", "Apres 2010")))
reg4 <- lm(beat_burnfood ~  year_binaire, data = dhs_ipv)
summary(reg4)
reg5 <- lm(beat_burnfood ~ relevel(year_binaire, ref = "Avant 2010"), data = dhs_ipv)
coef(reg5)
dhs_ipv <-
dhs_ipv %>%
mutate(year_binaire1 = factor(if_else(year <= 2010, "Avant 2010", "Apres 2010"), levels = c("Avant 2010", "Apres 2010")))
reg6 <- lm(beat_burnfood ~  year_binaire1, data = dhs_ipv)
summary(reg6)
reg_mul1 <- lm(beat_burnfood ~ sec_school + no_media, data = dhs_ipv)
reg_mul1
summary(reg_mul1)
reg1
reg1 <- lm(beat_burnfood ~ sec_school, data = dhs_ipv)
reg1
coef(reg1)
summary(reg1)
cor(dhs_ipv$sec_school, dhs_ipv$no_media, use = "pairwise.complete.obs")
reg_mul2 <- lm(beat_burnfood ~ sec_school + no_media + region + year_binaire, data = dhs_ipv)
summary(reg_mul2)
library(stargazer)
stargazer(reg1, reg2, reg_mul1, reg_mul2, title = "Divers modèles", align = TRUE, type = "text")
library(tidyverse)
string1 <- "This is a string"
string2 <- 'If I want to include a "quote" inside a string, I use single quotes'
double_quote <- "\"" # or '"'
double_quote
string1 <- "This is a \ string"
string1
string1 <- "This is a \\ string"
string1
string1 <- "This is a \\\ string"
string1
write_lines(string1)
string1 <- "This is a \\ string"
string1
write_lines(string1)
writeLines(string1)
string1
writeLines(string1)
x <- "\u00b5"
x
x <- "\u00b4"
x
x <- "\u00b3"
x
x <- "\u00b1"
x
x <- "\u00b5"
x
str_c("x", "y")
str_c("x", "y", sep = ", "
str_c("x", "y", sep = ", ")
str_c("x", "y", sep = ", ")
x <- c("abc", NA)
x
str_c("|-", x, "-|")
str_c("|-", str_replace_na(x), "-|")
str_c("prefix_", c("a", "b", "c"), "-suffix")
str_c("prefix-", c("a", "b", "c"), "-suffix")
name <- "Hadley"
time_of_day <- "morning"
birthday <- FALSE
birthday
str_c(
"Good ", time_of_day, " ", name,
if (birthday) " and HAPPY BIRTHDAY",
"."
)
str_c(
"Good", time_of_day, " ", name,
if (birthday) " and HAPPY BIRTHDAY",
"."
)
str_c(
"Good ", time_of_day , " ", name,
if (birthday) " and HAPPY BIRTHDAY",
"."
)
str_c(
"Good ", time_of_day       , " ", name,
if (birthday) " and HAPPY BIRTHDAY",
"."
)
birthday <- TRUE
str_c(
"Good ", time_of_day, " ", name,
if (birthday) " and HAPPY BIRTHDAY",
"."
)
class(birthday)
birthday <- FALSE
str_c(
"Good ", time_of_day, " ", name,
if (birthday) " and HAPPY BIRTHDAY",
"."
)
str_c(c("x", "y", "z"), collapse = ", ")
str_c(
"Good ", time_of_day, " ", name,
if (birthday) " and HAPPY BIRTHDAY",
"."
)
str_c(c("x", "y", "z"), collapse = ", ")
x <- c("Apple", "Banana", "Pear")
x
str_sub(x, 1, 3)
str_sub(x, -3, -1)
str_sub(x, 1, 1) <- str_to_lower(str_sub(x, 1, 1))
str_sub(x, 1, 1)
x <- c("Apple", "Banana", "Pear")
str_sub(x, 1, 1)
# Turkish has two i's: with and without a dot, and it
# has a different rule for capitalising them:
str_to_upper(c("i", "ı"))
str_to_upper(c("i", "ı"), locale = "tr")
x <- c("apple", "eggplant", "banana")
str_sort(x, locale = "en")  # English
str_sort(x, locale = "haw") # Hawaiian
str_length(string1)
string1 <- voyages
string1 <- "voyages"
str_length(string1)
n <- str_length(string1)
str_sub(string1, n, n )
str_sub(string1, n/2, n/2 )
str_sub(string1, (n+1)/2, (n+1)/2 )
string1 <- "voyage"
str_sub(string1, (n+1)/2, (n+1)/2 )
str_sub(string1, (n)/2, (n+1)/2 )
string1 <- "voyages"
str_sub(string1, (n)/2, (n+1)/2 )
n <- str_length(string1)
str_sub(string1, (n)/2, (n+1)/2 )
?str_wrap
thanks_path <- file.path(R.home("doc"), "THANKS")
thanks_path
thanks <- str_c(readLines(thanks_path), collapse = "\n")
thanks
thanks <- word(thanks, 1, 3, fixed("\n\n"))
thanks
thanks <- str_c(readLines(thanks_path), collapse = "\n")
thanks
thanks <- word(thanks, 1, 3, fixed("\n\n"))
thanks
cat(str_wrap(thanks), "\n")
cat(str_wrap(thanks, width = 40), "\n")
cat(str_wrap(thanks, width = 60, indent = 2), "\n")
cat(str_wrap(thanks, width = 60, exdent = 2), "\n")
x <- c("apple", "banana", "pear")
str_view(x, "an")
str_view(x, "a")
str_view(x, "an")
str_view(x, "an")
# except new line
str_view(x, ".a.")
dot <- "\\."
dot
# But the expression itself only contains one:
writeLines(dot)
# To create the regular expression, we need \\
dot <- "\\."
dot
# But the expression itself only contains one:
writeLines(dot)
# And this tells R to look for an explicit .
str_view(c("abc", "a.c", "bef"), "a\\.c")
# And this tells R to look for an explicit .
str_view(c("abc", "a.c", "bef"), "a\.c")
# And this tells R to look for an explicit .
str_view(c("abc", "a.c", "bef"), "a\\.c")
x <- "a\\b"
x
writeLines(x)
str_view(x, "\\\\")
str_view(fruit, "(..)\\1", match = TRUE)
str_view(fruit, "(..)\\2", match = TRUE)
str_view(fruit, "(..)\\1", match = TRUE)
str_view(fruit, "(.)\\1", match = TRUE)
str_view(fruit, "(..)\\1", match = TRUE)
